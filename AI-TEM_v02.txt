================================================================
INDEX
================================================================
01) Very Quick Tutorial
02) Setup
      How to build project
03) Release Note
04) Introduction to Emulator and ROM
05) About Street Fighter Zero 3 (STZ3)
06) About the term and character name

07) What is AI-TEM
08) The Woriking of AI-TEM
09) The AI Module
      Part 0: About STZ3 class.
      Part 1: Build-in AI
      Part 2: Python Script
091) About STZ3 Coordinate System

10) VBA Utility Tools
11) Animation Collection Tool
12) Auto Batle Tool
13) Memory compare tools
14) About Finding the address of game state data

15) Discussion
151) Problem Report
16) Reference Section
17) Credit
18) Legal Information
19) Version History

20) My Complainlation ???


================================================================
01) Very Quick Tutorial
================================================================
This is very quick tutorial for using AI-TEM. After you had every thing need to run AI-TEM
1 Double click on VisualBoyAdvance.exe (Ai-TEM)
2 File->Open Gameboy... then select your rom, the streetfighter alpha3
   You need to have this ROM first.
3 Control game, select training mode, select ryu vs anyone. Wait until battle screen.
4 MyAI->StartMyAI (or MyAI->StartPythonScript if you already install Python package already)
   Now if every thing right, you will see Ryu character automatic fighting. And you can create your AI module
   or script to control your fighter.
5 If you wnat to stop, MyAI->StopMyAI (or MyAI->StopPythonScript)
6 If you can run python script, you can try to change the character script immediately just open file 
   "mypyScript.py" and edit it. (may be you need to understand interface function before)
   And press MyAI->StartPythonScript again to see the result.

================================================================
02) Setup
================================================================
This package should come with following thing
1 AI-TEM Visual Studio 7.0 solution (for src include version)
2 GameState Folder and gamestate AI-TEM_Stz3Reload.sgm
3 Example of Python Script, mypyScript.py
4 INI file AutoBattleINI.txt, AutoAniCollectionINI.txt
5 Example file of animation collection
6 (may be another dll for MFC...etc...)

But you still need a few important things to use this AI-TEM package
1 The ROM, "Street Fighter Alpha 3 upper" ROM for GameboyAdvance. Due to some reason we cannot provide that 
   ROM with this package.
2 Python Interpreter, Python script can control your AI module instead of a build-in AI module in AI-TEM project. 
   To do that you need to install python package. This can find easily and free at 
   http://www.python.org just select one newest package from download page and install it. I think i didn't 
   use any complex or advance newest feature of it, so every version of python should be ok. (While i am 
   developing AI-TEM i use Python2.4 release 2005)
3 NASM Library It use for compile assembly part of original VBA project. It is free opensource project.
  But you need only its exe to use in this project. You can find it at http://sourceforge.net/projects/nasm.

===========================
How to build project
===========================
I had release this package in Visual Studio 7.0 version (2001). So user who use newer version of its should 
be OK to use it. I think now a day most of user should have 2003 version or 2005 version already. But for 
user who still use older version (VC6) may be you can transfer all file and make a new project file for that version.
    Before build the code you need to install python pckage first, After you download the latest version of it,
just install the package and it should be done. Then you need to place the nasmw.exe and ndisasmw.exe at 
the right place. If not you will recieve this error message from VS ' PRJ0019 custom build not found...'.
The right place for normal case is at 'C:\Programfiles\Nasm' (If you dont have that folder, then create it.)
or you can place them at another place and set the path in VS to find custom build exe. (But i dont know how 
to do that now.) After that if every thing not wrong you should successfully build AI-TEM.

================================================================
03) Release Note
================================================================
(NOTE**) Due to the build release setup problem, i decide to release this package with debug version...

Even AI-TEM is design to be a testbed for testing any commercial game with emulator. But this version that
you had is still a prototype version. Major part of its code is made for STZ3, and aim to use with STZ3 only.
I want to try the concept of using emulator as testbed for test AI. So I made this prototype AI-TEM for test 
that concept first. However if you try it and think its work, AI-TEM concept can be adapt to another game and 
another emulator.
    For more information about the source code you may looking in the source code itself or in file 
AI-TEMCode.txt. There are some part of code or some concept that you can use it when you want to change
to test another game. And i will try to made AI-TEM more generaly for every game in next, future version.
    The intend of release this package is to introduce AI-TEM and suggest researcher or any people who interesting
in AI development to try to use it, try to develop some AI that can be test in real hiquality commercial game.
(How to develope AI and test in AI-TEM is said in section the AI-Module below. I had provide some of data, 
tool and interface function for user already.)
    And...  important note: AI-TEM works only on Windows, I don't have enough knowledge to make it work 
on another OS. If anyone can, i will very pleasure. :)

    About this package, i had test it installation some but not much. i think it will be work well if you had install 
every thing that AI-TEM need that describe in Install section. Due to some manner (maybe?) i will not give the 
python inside this package. And Due to some legal stuff i will not provide the STZ3 rom within this package.
    For user who download only binary, or download source version but try to run fron executable application.
I think i had build it in static lib mode already, so you should not need any special MFC dll. I hope i did not
made anythingwrong. But if you cannot run it you can ask me via email in below.

    About the STZ3, The game has variety of option. i suggest you to use all character in the most basic A(Z) ISM 
fighting style. (V ISM is may be very difficult to track the animation when you use O-combo.)
And dont use any special mode such as classic or sykyo mode. (How ever that special mode need to unlock first.)
(More info about this will tell in STZ3 section) Because i dont sure the animation data that you had download or
got by running the AnimationCollection Tool will cover those special mode.

================================================================
04) Introduction to Emulator and ROM (*** Contend of this section is copy from my paper***)
================================================================
    An emulator is a software program that simulates the working of another software or hardware system 
on another system. For example VeriLogger simulates the working of electronic transistors and logic gates on
PC.  There are many mulators of console/handheld game hardware. VisualboyAdvance (VBA) and
isualboyAdvance Link (VBA Link) are GBA emulators. ePSXe is a PlayStation emulator. Even rcade machines
have MAME as their emulators. 
    ROM (Read Only Memory) is the game data dumped from the riginal game cartridge or disc. Using a game 
ROM with its emulator, a game can be simulated and played on PC.

================================================================
05) About Street Fighter Zero 3 (STZ3) (*** Contend of this section is copy from my paper***)
================================================================
    Street Fighter Zero 3 on GBA is a port version of original Street Fighter Zero 3 from the arcade Machine. 
Its original game is regarded as one of the best fighting games in the world. STZ3 is a fighting game. In This 
type of game, a player must select one character from many characters, and fight one by one with an opponent
character. A Player must decide what action he will perform in many different situations based on his character
and opponent character’s status. An expert player will have knowledge about the timing of every action in the
game. Expert players also know about which special move will have which special effect. Therefore, the game
allows clear distinction between expert and novice players. It is also a game that has many ways to play, even
for the same character. Therefore, we believe this is a good game for tuning our testbed and for AI research.

More information about how to play Street Fighter Zero3 can be found at www.gamefaqs.com.
http://db.gamefaqs.com/console/psx/file/street_fighter_alpha_3_c.txt
There are many genius game player dedicate their time to made those document.

================================================================
06) About the term and character name
================================================================
    There are som different between the term and name of Japanese version and US version. Even in AI-TEM 
experiment i use US game ROM, but... i always familiar with japanese term. So, sorry for US guys, but i will 
use japanese term in this document.

- The Z (Zero) ISM in japanese is A (Alpha) ISM in US.
- The name of bigboss bad guy who is fat and wear red cap is Vega in japanese (but M.bison in US)
- The guy who wear mask and claw is Balog in japanese (but Vega in US)
- The Boxer guy who looklike Mike Tyson is M.Bison in japanese (but Balog in US)
And he is the cause of these shuffle name problem. Because when capcom release the street fighter game in US 
long times ago. There have some problem about legal of that guys... so they need to shuffle the name of 
character to avoid it. 

(Some complilation :P For hornestly. i cannot understand CAPCOM US people. why dose you use Alpha instead 
of Zero. Zero is make sense perfectly. because this game is the story before street  fighter1, so it should name 
with zero. The term Alpha sounds like a prototype or not complete program, should not use. And another big 
question is... what the .... CAPCOM think when they change name from 'Rockman' to 'Megaman'. Does Rockman 
not sound cool for US people?)

================================================================
07) What is AI-TEM
================================================================
First, the reason that this topic is not place at the top of this file is that. I think that you should already know 
what is it before you download and get this package. :) And first topic on the top should be quick tutorial.
    AI-TEM is stands for Artificial Intelligence Testbed in Emulator. As its name say it is testbed for test AI.
Whaaerr.. 'what is testbed?'. Testbed is term to call an application that use for testing something. Then
AI-TEM is an application for testing AI.
    AI-TEM made from emulator of console/handheld game. This version of AI-TEM that you are using is
made by VisualboyAdvance Link, an Gameboy Advance emulator. Now let me tell you about these things first.
Gameboy Advance is handheld game machine of Nintendo, release on maybe 2000-2001. It use ARMs CPU.
Even it is not a powerful machine as PSP or NDS but it stil have many classic game that is very interesting.
Such as Super Mario, Street Fighter, Winning Eleven, Final Fantasy. Visualboy Advance is a very good
opensource emulator it porvide many tools that i can adapt to use in AI-TEM. VisualboyAdvance link is another 
version of Visualboy Advance that made by another team. It has ability to play in link mode, multiplayer mode.

================================================================
08) The Woriking of AI-TEM (*** Contend of this section is copy from my paper***)
================================================================
The Concept of AI-TEM is generally simple but there is
some difficulty using it. Researcher’s AI may need to know
game state data, such as object position or character animation,
but it cannot access the source code of the game. The
AI can only access the source code of the emulator. So we
must get the game state data from memory data the emulator
is emulating. We can see only a binary (hexadecimal) value
of game data that changes in every cycle of a game execution.
We must therefore find out which address stores the
value that we are interested in such as position, animation,
etc. We will use values in those addresses as game state data
for AI testing. When we know the game state, AI can be
written to react in each situation, by sending a controller input.
Using this concept, we can use AI-TEM as an AI testing tool.

Finding each address that stores those game state data is
difficult if done manually. Some values can be found easily,
while some are rather hard to find. User should have some
knowledge about programming in order to be able to identify
address more successfully. Some examples of how to
find the address of game data are demonstrated below.

Example 1: Finding address of character health. Starting
by identifying all the values used in the game. Then the
game is played and the character health is forced to decrease.
The value that represents the character’s health should in fact
decrease too. All game values are then searched and compared
with values before the health decrease. It is common
to find many values decreasing. The process should be repeated,
with different health, until one address is identified.

Example 2: Character’s bullet position. The concept is the
same as character’s health example. When a bullet moves
forward, its position value should increase respective to its
position. But the time period that bullet is alive is very short.
Therefore, repeating the experiment as many times as one
wants becomes difficult. If users must press a command every
time that they want to find a value, it will not be convenient.
Tool to fire character bullet many times is needed,
such as input recorder. We had developed some
tools to help finding the address more easily and will describe
it in sme section below. And There are other techniques to
find values that we will discuss in another section.

    As said, The core of this testbed is VBA (Link) emulator. It is used
to run game ROM and simulate the game.
    We add a menu into emulator to control the working of AITEM.
To turn on/off AI module or switch between different
AI modules. We can also activate other utilities that system
may want to use.
    A game state can be known by observing data on the memory
address of the emulator and locating which address
stores the data that we want to know. (In STZ3, game states
that we are interested in consist of position of a character,
position of the character bullet, the character’s health, and
current animation of the character.) We implemented this
module by modifying the memory viewer tools of VBA. The
user can identify address and size of data (8, 16, 32 bits) that
they are interested in. When AI-TEM is running, in every
frame, Game State Observer will copy the value from those
addresses to the data structure that an AI module can use.
    Before Game State Observer sends game state data to AI
module’s data structure, the game state data must be normalized
or interpreted, depending on the game and format
of data that we got from memory of emulator. Example: For
STZ3, we use address 0x20007D0 (32bits) as the address
that stores the character P1 animation. The range
of value that we got from that address (for Ryu case) is 
33646840* to 33657952*,  11112 units.
And the value always increase by 12 every animation frame.
So indeed they have (11112/12) + 1 = 927 values.
So when using it, we should normalize
value to 0 - 927 for user friendliness. Therefore,
we must subtract 33646840 and then divide by 12 
from the value copied from the memory
of emulator. This normalization process is not necessary if
researchers do not care about the format of raw data from
emulator’s memory.
(* The value is not constance every time but its range is constant.)
    Now we come to the AI module. 
This module is where a user of AI-TEM will put his AI module
in. In every cycle of emulation, the emulator will execute
this module. This module evaluates the game data and
decides what controller input it will send to the controller
module. There is enough CPU power for calculating nonintensive
work, such as script (Dynamic script (Spronck et
al 2004), Genetic Programming result script, etc.)
There are more detail about this module in The AI module section.
    Python (Python 2006) is an interpreted, interactive, objectoriented
programming language. It is also usable as an extension
language for applications that need a programmable
interface. Python is portable: it runs on many OS such as
Windows and Linux. It is one of the most famous script languages
used in many applications.
    We modified the emulator to have an ability to use python
script language, providing interface functions for a script
writer to obtain game state data and to control the game via
any AI. A script writer can write their python script separately
without running the emulator, and can change script
without recompiling AI-TEM. There are more detail about this module 
in The AI module section.
    Finally, original VBA will capture signals from joystick or keyboard
and send them as input to a game. We modified the system
so that our AI module can replace input signals from normal
controller with its own signals.

    Outline steps of Using AI-TEM
    Researchers must identify the game states data that their
AI module needs to know. In normal AI method, such
as scripting, it needs to know only current situations of
the game. But in some AI method such as some type of
Reinforcement Learning, it needs to know a complete set
of actions that the agent can perform in every situation.
    After that, they must find the address of game state data
that their AI needs to know. This step can be difficult for
some games. Researchers may not have enough experience
to identify the correct address.
    After the addresses are found, they must collect the data
from those addresses and translate the data into a form
that the AI can understand.
    Implement their AI...

================================================================
09) The AI Module
================================================================
This section will describe in more detail how to program your AI and use it in AI-TEM, in STZ3. There are 2 
parts in this section. The first part is about build-in, hard code AI. That means you wirte your code in AI-TEM 
project solution file you can do anything that you want, create new .cpp or .h or use any another AI lib, dll to
combine with your experiment. But its means you need to recompile and rebuild every time you change your 
code. The second part is about python script AI. python is not only a script language now. It said it has ability 
and powerful as another language. But i still dont sure it will have much of second or third party library, dll or
engine support much as C/C++. (Sorry dont know much about this.) The reason that i made some python
interface function into AI-TEM is because i think the abilty that it can change script without recompile or rebuild 
the program is very good for some type of AI. And should be good for the user that dont have much knowledge
about programming. Ah that is too long for intro, lets begin.

=================================
Part 0: About STZ3 class. 
=================================
This class use in both Build-in AI and Python script.
In the file Stz3.cpp and Stz3.h. There will be Stz3Character class, which use to keep all data and function of 
character. This is most important class of this prototype AI-TEM. I will describe every member and function....

int SetGameStateAddress(short p)
It will setup hardcode game state value, which adress is mean which data. After the AI-TEM is running. those
address will observed and update every cycle.

int UpdateGameStateData()
int UpdateGameCalData()
They will observe and update all game state data. And the normalization process is in these function too.

int ReadAndSwapByte(u32 addr, u16 nBytes, void* pAns)
It use for swap the raw data that read from the ROM, called by UpdateGameStateData().

char m_charID;
	
char m_ISMType;     // Fighting Style (A, X, V)

	
int m_charIDStatic;   // Due to that stupid problem about value change	
	
int m_hitPoint;         // HP
	
int m_guardGauge;   // Guard damage guage
	
int m_ismBar;          // Special move gauge
	
int m_posX;             // Position in X axis
	
int m_posY;             // Position in Y axis
	
int m_wPosX;           // Position of his weapon bullet (Ex.Hadoken, SonicBoom)
	
int m_wPosY;           // Position of his weapon bullet (Ex.Hadoken, SonicBoom)
	
int m_wEnd;
	  // how long until that bullet will end or disappear
All of this member variable has name that makesense already, so i will skipt it. They are attribute or property 
of character in STZ3. if you know the game you can understand them automatically. These variable is for hold 
the value of their pair address variable. ex. m_posX is hold value of address that keep in m_addrPosX like this.
-----------------------------------------------------------
m_posX        m_addrPosX
44                20007C2
-----------------------------------------------------------
The m_addrXXX value will static, will not change. because it hold the game state address not the value.
Next it still member variable game state data but its meaning has some thing need to explain.

int m_animation;
      // Animation of character before normalize
int m_refAnimation;
  // Base value (not base animation) that will use in normalization
int m_aniOffset;
	  // Offset value that also use in normalization
This 3 variables (and their address variable pair) will use for hold and calculate the animation value. The way i 
use for calculate animation value and normalize it is like this.
----------------------------------------------------------------------------------
aniAfterNormalize = m_animation - baseAnimation
baseAnimation = m_refAnimation - m_aniOffset
so
aniAfterNormalize = m_animation - m_refAnimation + m_aniOffset
-----------------------------------------------------------------------------------
I cannot use m_animation; because i need to normalize it before. The raw value of it is about 10000000 - 20000000
which is not user freindly. So i choose the leasetest animation value to be base of normalization (baseAnimation).
The leasetest value is the standing animation. (for all character except only VEGA)

 But the value of m_animation address is not 
steadly still. Even you select same character and same rival sometime you will got different m_animation value.
And sometime it even change between new round of battle. For example you select Ryu Vs Ken, and see that the
m_animation of Ryu stand animation is 2016940 and then you fight until round 3 maybe you will found that Ryu 
stand animation is change to be 201F164. 
In this situation it means that baseAnimation is always change.
So i need to find another address that will use to reference baseAnimation.
    I found that for any animation every time the different value between m_refAnimation and m_animation will 
always be static value.
Example if you calculate the m_refAnimation - m_animation(stand) you will always get same value (c1).
or if you calculate the m_refAnimation - m_animation(jump) you will always get same value (c2).
or if you calculate the m_refAnimation - m_animation(crouch) you will always get same value (c3).
But c1 <> c2, c2 <> c3 and c3 <> c1.
So i can use m_refAnimation as the base value to find the baseAnimation 
Next, as i said that i will use standing animation as baseAnimation, so i need  to know the defferent between
m_refAnimation and m_animation(stand) which is a static value. That value will called m_aniOffset.
Finally i need to collect m_aniOffset for every character because each character has diferebt m_aniOffset value.
After i had collect m_aniOffset already i write it as hardcode in m_aniOffset[] array.
    OK, that is the story about how animation data come. In deed you need to call 'm_p1Ani' variable to get
the final value of animation to use in your AI module.

int m_damage;
This variable (and its address pair) has many usefule. First it will tell how many damage that character got.
Since in the training mode the health bar of 1p character wil never decrease, so you can know the damage 
that you got by this address. Second the value in this address will accumulate if that character got continuous 
damage (combo attacked). Example if you see a set of 6 frames value like this '0 5 10 15 30 40 0'. It does not
means you got 0+5+10+15+30+40+0 = 100 damage. You got only the highest 40 damage, because it
accumulated. If you want to know how many damage you got in that frame you need to subtract value from
that frame with value from previous frame. To know where those accumulate begin and end is simply. 
Just observe when it is 0, that means it  is end of accumulation/combo. Therefore find the highest value 
between two 0 values, it will be total damage. I see, i look a little bit dificult. If you do your experiment in 
Arcade or Versus mode, you can know the damage or health of character directly from m_hitPoint. But.. there 
are still have the third meanings of this value. Indeed the example that i made above is fake thing for make
you easy to understand the concept of accumulation. The real value should be like this... 
0 5 5 10 10 15 15 30 30 30 30 40 40 40 0.
Total damage that char got is still 40. you can still use subtraction of 2 frame to know damage of that frame.
The meaning of repeat value is 'that char still in animation of wounded/damaged from the attacked'.
In that example you component hit you 5 time continuously (5 Hit combos). Damage from each hit is
5, 5, 5, 15, 10 total 40. First hit is only 5 damage and you character got hurt and be in damaged animation of 
that hit for 2 frames before you got damage by next hit. Second and third hit is also. Forth hit make 15 damage 
and still in its effect for 4 frames. Fifth hit is 10 damage and 3 frame before you recover back to normal animation.
While the character is still in damaged animation, that character cannot do anything and it is very good 
opportunity for oppone to continuous its attack.

Stz3Character* m_pRival
This class for you opponent.

int   m_deltaX;
	// Distance between characters in X axis
int   m_deltaY;
	// Distance between characters in Y axis
int   m_deltaWX;
	// Distance between characters and opponent's bullet X axis
int   m_deltaWY;
	// Distance between characters and opponent's bullet Y axis
bool  m_flag;          // 0 = Left, 1 = Right side

short m_forward;
	 // Which button is backward direction Left or Right, depend on your side
short m_backward;  // Which button is backward direction Left or Right, depend on your side
Those variable is makesense by its name already.

bool  m_busy;         // 0=not busy-idle, 1=busy
int m_nextKBI;        // Key buffer index, tell what index will use next;
int m_KBStock;        // Key buffer stock, tell how many KB left
	
int m_keyBuffer[KEY_BUFFER_SIZE];  // Key buffer for long command, 1024 should enought?
These 4 variables use in Key Buffer (KB) system. KB is array buffer that will use to press button forward for many 
frames. Since The AI module that you are programming will be called every frame. And i design it to answer 
a controller output every time that it had called. So when i need to perform some special move (QCF, etc..)
i need to store those command into m_keyBuffer[] array for further next many frames. And set the flag m_busy
in to 1 busy. When AI module is execute i will first check this flag, if it is set to busy i will return the value in
m_keyBuffer[nextKBI] immediately, without calculating AI. (Indeed every action that you want to do is need to 
press button more than 1 frame, 1 frame is too less for do anything. Since human player press button 1 time
will use approximately 6 frames that button was pressed.) Lets see the example psudo-code.
-----------------------------------------------------------------------------------------------
// Frame 0:
// I decide to perform Hadoken (down, down/right, right, punch)

m_keyBuffer[0] = PRESS_DOWN;
m_keyBuffer[1] = PRESS_DOWN; // Need to repeat beacuse 1 frame is too less
m_keyBuffer[2] = PRESS_DOWN | PRESS_RIGHT;
m_keyBuffer[3] = PRESS_DOWN | PRESS_RIGHT;
m_keyBuffer[4] = PRESS_RIGHT;
m_keyBuffer[5] = PRESS_RIGHT;
m_keyBuffer[6] = PRESS_A;
m_keyBuffer[7] = PRESS_A;

m_KBStock = 8;
m_nextKBI = 0;
m_busy = 1; // Busy
-----------------------------------------------------------------------------------------------
// Frame 1;
// Since m_busy is set to true, AI module will return it button in KB.
// if (m_p1.m_busy) {return CheckKeyBuffer();}

result = m_keyBuffer[m_nextKBI];
m_nextKBI++;
m_KBStock--;
if (m_KBStock <= 0) {m_busy = false;}
reutrn result;
-----------------------------------------------------------------------------------------------
// :
// It will go on like this until frame..8
// :
-----------------------------------------------------------------------------------------------
// Frame 9;
// Final frame of this set of command
// if (m_p1.m_busy) {return CheckKeyBuffer();}

result = m_keyBuffer[m_nextKBI];
m_nextKBI++;
m_KBStock--;
if (m_KBStock <= 0) {m_busy = false;} // Doing this condition and end this KB
reutrn result;
-----------------------------------------------------------------------------------------------
// :
// Since m_busy is false, next time this module had call it will go to calulate AI.
// :
-----------------------------------------------------------------------------------------------
That is just the way that i manage basic system of STZ3 controller and AI module. If you dont like it or have 
another way that better you change this system. And that is end of description of StZ3.cpp / .h file

============================
Part 1:Build-in AI
============================
In the file Stz3AIScript.cpp and Stz3AIScript.h there is the home of Build-in AI. See in .h file i had seperate it into
4 section. section 1 is everything you should understand. section 2 is all of function that i use to make example AI.
section 3 and 4 is for another tools but i make it in same class so it appre in this .h file, no need to see it now.
I will explain in term of describe meaning and how to use each member variable and function. Event this is section 
for build-in AI but the concept of every thing also use in python script too. So, i suggest python script user to read.

int DPF(short button);     // Dragon Punch Forward
	
int QCF(short button);     // Quarter Circle Front
	
int QCB(short button);     // Quarter Circle Back
	
int HCF(short button);     // Half Circle Front
	
int HCB(short button);     // Half Circle Back
	
int Throw(short button);
  // Throw
    Most of function in section 1 is the PressButton function. use for press package command. The package command
is a set of popular command that usually use in STZ3. For example the QCF is press down, down forward, forward
this use in many character and many special move. Therefore i made it for conveniun use. All of this kind of function
are DPF, QCF, QCB, HCF, HCB and Throw. This abbreviation is universal for every fighting game document. You can 
see that those function need 1 argument type int name button. That is the punch and/or kick button that you want to
press after you press package direction button already. To perform special move you need to press the pucnh and/or 
kick button that match with that character. You can see the special move list of every character in .... document.
Some example. For Ryu, QCF(punch) is Hadoken, a fireball special move. if you send QCF(kick) he will not 
perform Hadoken. You will see the define value of GBA button on .h file. You know? to perform special move 
ypu need to press right command in righ timing if you press too fast (that is impossible for human manual buy
possible in AI module) or too slow the special move will not perform. So this package command is quietly optimize
for the best timing already. (But not guarantee it is the best timing.)

int Guard(short state, short nFrame)
This function use to perform guard, a most important action of fighting game.
State: is you want to guard in stand or crouch position, if you stnad guard but opponent is perform crouch attack
you guard wil break and you got damage, and viseversa too.
nFrame: is how long do you want to perform guard, how many frame.

int PressButtonNFrame(short button, short nFrame)
This function is use to press anybutton for nFrame. as it name say.

int PressCustomCombo(int nButton, int* pButton, int* pNFrame)
Every above function is subset of this function. This function will allow you to press many continuous button as 
you need (but not exceed the buffer limit.) You need to send array of button and array of time to press that button 
as arguments. Example PressCustomCombo(4, pButtonint, pFrame) and
pButton = {PRESS_DOWN, PRESS_RIGHT, PRESS_LEFT, PRESS_A}
pFrame = {6, 5, 4, 3}
Its means PRESS_DOWN 6 frames then PRESS_RIGHT 5 frame then  PRESS_LEFT 4 frames and PRESS_A 3 frames.
Makesense and easy to use?

int LoadCharacterOffset()
int m_characterArrayOffset[N_CHAR]
int m_characterArrayOffsetType2[N_CHAR]
int m_characterArrayMaxAni[N_CHAR]
int m_characterArrayMaxAniType2[N_CHAR]
This 5 function is to prepare charater animation data. It use to load character animation offset. More detail is
describe in section game state data already. And reference of character ID can see in reference section.

============================
Part 2: Python Script
============================
File Stz3Python.cpp /.h. Most of python interface/ concept will work as same as build-in AI. To make python 
script work i had provide interface function for python script user. Those function can call from python script 
and can do everything as build-in module can do (such as get position, animation, anybar, press button etc).

int RunPythonScript()
This is main function. This function will call your python script. And this function will be called every frame.
So your python script will be called/execute every frame too. It duty should be update game state data and then
checking for KeyBuffer then call python script. This is as same as build-in AI. You can change the way its work 
if you dont like my way ot if you have another way that better.

int initstz3()
This function wil called only first time the python module is created. It will create/ regist the interfaces function 
into... program... then your python script can use those interface function. You wil see 4 set of code that setting 
array of python object. and the last line in this function is...'Py_InitModule("stz3", m_stz3Method);' that means 
i had made those interface function wrappup into 'stz3' library (or some kind of library) for python. When you 
use python script you nee to import it first. Whit code like this
---------------------------------------
import stz3
---------------------------------------
And when you want to call the interface function from C++ side. You may do like this...
----------------------------------------------------
stz3.CPPressCustomCombo(ptr, mytuple)
----------------------------------------------------

There are 4 main interface functions form AI-TEM to python script. They are...
- CPPressPackageCommand(PyObject *self, PyObject *args)
- CPGetData(PyObject *self, PyObject *args)
- CPPressCustomCombo(PyObject *self, PyObject *args)
- CPLoadState(PyObject *self, PyObject *args)
You may see that first argument of all of them are the same, PyObject *self, That argument is a pointer to 
Stz3Python class that hold all game state data for python. You can see that those function is not member of
Stz3Python class, because of Python wil allow only static function to be their interface function. (Indeed i dont 
know much about this maybe i am wrong...) So the interface function must be static and cannot be class member 
function. (Because if that class has not create, that function cannot be called.) When it is not class member it 
cannot access to the game state data that is the goal of interface function. Therefore i need you, python script user, 
to send the pointer to python calss into those interface function, for they can call real interface function from
Stz3Python class again... . And that pointer will send to python script as argument when RunPythonScript() call
your python acript every time, So you just need to send it back when you call those interface function.  Hard to explain
may be you can more understand when you see the code... . And... for hornestly i dont know other way that better 
than this way, if you know please tell me. (There are another way that i know, it is to make global variable. But that confilct with OOP methodology so i dont like it. event i had break many of OOP in my code :P)
----------------------------------------------------------------------------------------------------------------------------------------
Example:

// C++ side:
int
Stz3Python::RunPythonScript()
{
    :
    m_pValue = PyCObject_FromVoidPtr(this, NULL);      // prepare pointer of this class to send out to python script
    m_pFunc = PyDict_GetItemString(m_pDict, "Main");   // prepare to call python script, function Main
    m_pValue = PyObject_CallObject(m_pFunc, pArgs2); // call python script with send that pointer out too
    :
}

// Python side:
def Main(ptr):    // recieve ptr, which is pointer that send from C++ side
    p1x = stz3.CPGetData(ptr, GET_POSX, STZ3_P1) // Send it back...
    return p1X

// C++ side, static function called:
PyObject*
CPGetData(PyObject *self, PyObject *args)
{
    :
    if(PyArg_ParseTuple(args, "Oii", &pp, &commandID, &objID))  // Parse parameter
    {
        Stz3Python* pStz3Python = (Stz3Python*)PyCObject_AsVoidPtr(pp); // Retrieve back the pointer
        return pStz3Python->GetPosX(objID); // Call real interface function
    }
    :
}
----------------------------------------------------------------------------------------------------------------------------------------
Next will explain about 4 interface functions.
Since parameter interface of every function is '(PyObject *self, PyObject *args)'. And first argument 
PyObject *self is pointer to Stz3Python class as saide above. I will tell only the form of second argument
only. Python script can wrap all of argument into array of PyObject*. It does noe mean you need to send
PyObject* from python, you just need to send ordinary variable and it will automatically convert to PyObject*

CPPressPackageCommand(PyObject *self, PyObject *args)
PyObject *args need 2 int argument. First is package commandID, second is buttonID.
Example: stz3.CPPressCustomCombo(ptr, QCF, PRESS_A)
    This function will use for press package command, that is popular command and usually use in STZ3.
The package commandID and buttonID will combind into special move. Example for Ryu press QCF+A
will fire Hadoken.
Where package commandID is
QCF  = 1

QCB  = 2

HCF  = 3

HCB  = 4

DPF  = 5
And ButtonID is
PRESS_A            =   1

PRESS_B            =   2

PRESS_SELECT   =   4

PRESS_START    =   8

PRESS_RIGHT    =  16

PRESS_LEFT      =  32

PRESS_UP         =  64

PRESS_DOWN   = 128

PRESS_R           = 256

PRESS_L            = 512
(You can press more than one button by using '|' or operation, such as if you want to press A and B 
you need to write code as this PRESS_A|PRESS_B)

CPGetData(PyObject *self, PyObject *args)
PyObject *args need 2 int argument. First is dataID, second is objectID.
Example: stz3.CPGetData(ptr, GET_POSX, STZ3_P1)
    This function will return dataID of objectID. But for some objectID it has some exception.
List of dataID and objectID  that valid for them
-----------------------------------------------------------
dataID: GET_ANIMATION = 1

objectID: STZ3_P1  =  1
              STZ3_P2  =  2
-----------------------------------------------------------
dataID: GET_POSX      = 2
objectID: STZ3_P1  =  1
              STZ3_P2  =  2

-----------------------------------------------------------
dataID: GET_POSY      = 3

objectID: STZ3_P1  =  1
              STZ3_P2  =  2
-----------------------------------------------------------
dataID: GET_GAUGE     = 4
objectID: STZ3_HP_BAR_P1    = 1

              STZ3_ISM_BAR_P1   = 2

              STZ3_GUARD_BAR_P1 = 3

              STZ3_HP_BAR_P2    = 4

              STZ3_ISM_BAR_P2   = 5

              STZ3_GUARD_BAR_P2 = 6

-----------------------------------------------------------
dataID: GET_DAMAGE    = 5
objectID: STZ3_P1  =  1
              STZ3_P2  =  2
// Same as m_damage of build-in AI, 
// please see moredetail in buil-in AI section
------------------------------------------------------------

dataID: GET_FRAME     = 6 
objectID:- (no need)
// Get number of frame since that battle is start.
------------------------------------------------------------

CPPressCustomCombo(PyObject *self, PyObject *args)
PyObject *args need 1 tuple argument. Which is tuple pair array of buttonID and frame time.
Example: 
mytuple = ((PRESS_DOWN, 2), (PRESS_DOWN|PRESS_RIGHT, 2), (PRESS_RIGHT, 2), (PRESS_B, 2), (0, 10))
stz3.CPPressCustomCombo(ptr, mytuple)
    This function will allow you to press many continuous button as you need (but not exceed the buffer limit.)
You need to define tuple pair array like above example. Form that example its mean press down 2 seconds then 
press down|right 2 seconds then press right 2 seconds then press b 2 seconds then not press any button (0) 
for 10 seconds. That will have effect similar as QCF+B.
Note:
mytuple = ((PRESS_DOWN, 2), (PRESS_DOWN|PRESS_RIGHT, 2)) is OK correct. but...
mytuple = (PRESS_DOWN, 2, PRESS_DOWN|PRESS_RIGHT, 2) is wrong, not acceptable. Notice the bracelet

CPLoadState(PyObject *self, PyObject *args)
PyObject *args need 1 string
Example: stz3.CPLoadState('C:/mystate.sgm')
    This function allow you to load game state. After load state the game will suddenly change state to the state
that you load. If you are in battle and you load AI-TEM_Stz3Reload.sgm. You will go to training mode select 
character screen immediately. Can use in many situation such as escape from battle to change character, etc...

Finally, If you want to add more interface function you can do easily (maybe) by folow this step.
1 In initstz3() function add one more set of array for your new function.
   ml_name //  The name that you want to use in python script side.
   ml_meth // The name of C++ side function that this function will call.
   ml_flags // I dont know, just use METH_VARARGS follow the python official example.
   ml_doc   // Some comment...
2 in Stz3Python.h file, edit size of this array PyMethodDef m_stz3Method[4]; increase one. Remember that 
   you cannot greedy allocate it to be nummber that more than you actually initial it in initstz3() function.
3 This is hardest step. Create interface function that name as ml_meth that you just give in stpe 1. You need 
   to define the parameter interface and know how to parse PyObject* back into  C++ variable type. By using
   'PyArg_ParseTuple' function. I dont know much about it, can only parse some simple type of argument.
   You can see some example from my code, but if you want something more complex please read python
   refference manual.
I think  had make interface function that...may be cover some simple static script AI already. I hope you dont
need to add more. And one more function that i did not made is to write log file. But i think you can do that 
kind of function by using pure python.

==============================
Python Error Check
==============================
When you write python script, you should want to know is that script it correct or not. Correct in this context means syntax error free, code can run but not include algorithm error. Normally script language need not to compile, so you will always know is it have syntax error only when running it. And if it has error the application will crash and shutdown. The v00 and v01 of AI-TEM was been that too. But now, from some suggestion of  Emmanuel77 (Gamedev.net), i had add some code to manage that problem.
    Now when user write python script that has error and run it. AI-TEM will show dialog to warn you that your python script has some error. Then you can see error at err.txt file at the current working path. The program will not crash but only stop the python AI module. So after users had correct that script they can rerun it immediately. But to do this user's python script must write in try-except block loop. That should not affect much of CPU power, should not worry. And need to have function 'Redirection' in their script too.
    Let see some example, in mypyScript.py that release in v02 version. You will see that it has try-except loop cover all of the codes in main function. That is the pattern to use error check. User just write their own code under the 'try' loop and no need to modify any thing under 'except' loop if you already satisfied the way i report error in err.txt file. Code under 'except' are just the format to report error in err.txt file. You can learn more about how to report error from many python tutorial sites or forums.
    The function 'Redirection' use to redirect, bypass any error report, printout from python to somewhere, in my case i redirect them to err.txt file. This is the simplest way to redirect, indeed after redirect you can add more function in main AI-TEM side to handle error when they happened too.

==============================
About STZ3 Coordinate System
==============================
This section will tell about the coordinate system of STZ3 that use in AI-TEM. GBA screen is 240 pixels width 
and 160 pixels height. But in AI-TEM, we use the address 0x20007C2 (for1P) to be representation of position 
value. And the value that read from those address is not in pixel. Its value is more precise than pixel. I will call
the unit that use in those address as 'su' (STZ3 unit). To convert from su to pixel is very easy, 1 pixel = 2 su.
    The battle stage in STZ3 game is wider than one GBA screen. And the size of each is not equal, some stage 
wider than another. For example for the stage that use in training mode is 640su (320pixel) width. The left most 
edge of stage is the 0su (0 pixel) and the value increase when character move right.
    The next ting you want to know is that where is the reference point in the character sprite which value in addres 0x20007C2 means. The answer is... 'somewhere near middle of the sprite'. Yes it is somewhere because that point 
is not fix to be center of sprite and did not a same posiiton for every character. Example for Ryu, the reference point
is 12 pixels from his left most part of sprite (even you are on right side), which is 4 pixel from his center of sprite 
(His sprite width is 32 so the center is 16). (And you can see the size of sprite of all character in reference section.) 
I suggest you to use the reference point of position at the middle of sprite. Even it is not exactly correct but i think
it is acceptable and suitable to use. Because the position of character always change along the fighting and maybe 
it does not need most exactly position value, if the error is not much (3-4 pixel) it should not effect the AI experiment.
However id you need very exactly reference point you can measure it by this method.
- Move your character to the left most edge of the stage (not the screen) which you will read value 2C from position addr.
Dont worry if some character sprite will have some part lose over the screen such as ehonda. Or some character wil
still left some space from left most edge of the screen such as Ryu or Ken.
- Capture the picture of that screen
- Measure it with some picture editor program such as photoshop. Find the position 44 pixels (2C) from left most edge
of the screen. That position is the reference point of that character. Example for ryu you will find that that position is
12 pixel from his left most part of sprite. And it will project on his left hand if you stand on the left side.
- This is very important, You should keep the value in term of X su or pixel from left most part of character.
Do not remember that position by reference to character head, hand or leg, because when the sprite is draw flip
(when your character change to right side) that position will change too. For example the 12 pixel from left most part
of Ryu is his righthand wrist when he is in left side. But when he is in right side the 12 pixel from his leftmost part 
will be his mouth. So dont remember by his right hand wrist but remember 12 pixel from left most part.
    And you may need to do this process for every character because it is not same position for every character.
Again that i suggest you to use approximaterly point, the middle of sprite.

    About the position Y axis. From value in address 20007c6, it will (approximately) show position of bottom 
edge of sprite. In case of RYU (and almost character) it will be 28(h) at standing on ground position.
(For Ryu jump case, the value range is 28h-7Ch)

    About the bullet, Approximately bullet size is 32x32 pixel (for hadoken of ryu, another bullet may vary)
And the reference point XY from the address that i give is middle of the sprite. (approximately again...)
Middle means middle of sprite in both X and Y axis. Due to the bullet position is not need more exactly position.
So now i still not measure the size of all bullet type. But will give some example of them.
- Ryu hadoken is fire at 60h height
- Sagat TigerShot (hi) is fire at 7Eh height
- Sagat TigerShot (low) is fire at 5Bh height


================================================================
10) VBA Utility Tools (*** Content of this section is copy from my paper)
================================================================
This section will tell you about useful tools from original VBA that will help you in using AI-TEM.
(For my custom/adapt tools, there will be seperate section especially for each of them, so they will not 
mention in this section.)

Memory Viewer: used for displaying content of every
memory data address in a variety of formats, 8, 16, 32 bits,
sign, unsigned and hexadecimal. AI-TEM's Game State Observer
is modified from this tool. This is very useful when you want to
see the value in any address in realtime.

Cheat Search: this tool is originally used for finding an
address of data that we want to find, by searching all of
memory and finding a value that match a condition given
by user. For example, user can use it to find a value in the
address that is equal, greater or less than some specific value.
This is the most basic important tool use to find the game state address.

Movie Recorder: this tool can record game movie in two
formats. VMV format will record only initial game state
and inputs given by controller. It has a very small file but can
playback only in emulator. AVI can playback in many movie
player programs but its file is larger and uses a lot of CPU
power. Movie recorder can help in a data collection process
and can help recording the testing output or debugging.

Save/Load State: When running game in emulator, the
game state can be saved and reloaded to continue to play
at the same point where it was saved. This ability is useful
when researchers want to test decision condition of AI.
They can save game state before their AI make decision and
can reload it to try another decision in perfectly the same
situation.

================================================================
11) Animation Collection Tool
================================================================
    If your AI module need to know what animation is your or your opponent character is performing may be 
you need to run this function. This tool is now can use for STZ3 only.
----------------------------------------------------------------
MyAI->startAniRecord
----------------------------------------------------------------
    This function will make a frame capture for every motion of character that define in AutoAniCollectionINI.txt  
the output will be a huge set of image which character perform every action and the name of that image will 
the animation value (after normalized) you can see some example of the result image in example animation 
collection folder.
    This package will give you with initial AutoAniCollectionINI.txt file which it will command startAniRecord 
function to collect every character animation that will make a complete result folder size 1G approximately. 
Yes i know its a huge size. Indeed i should give you a text file database of animation value. suchas...
'Ryu crouch 72' But i still not complete that task, so may be in the future i hope i can release it.
    Next i wil explan about  AutoAniCollectionINI.txt file format. After you understand it, you can write you own 
INI file and select only some character to collect animation. the file is very simple and look like this example
----------------------------------------------------------------
D:/AI
2
26 0 100
0 0 100
----------------------------------------------------------------
- The first line is destination folder that you want to keep result image. I use window CreateFolder function() 
   it can create one level folder if not have. However it is better if you define a folder that created already.
   And dont put the final slash / at the end of path, example: 'D:/AI' is ok but 'D:/AI/' is not ok.
- The second line is number of lines that following. (I want you to write it because need to know how many 
   memory to allocate, in one round parse.)
- The next rest line is the script to define which characters will be selet to collect animation there are 3 number 
   separate by space. First is character id, second is ISM mode of that character, third is number of frame 
   (animation) that you need to collect. (If you wonder that what is ISM, please see section StreetFighterZero 3)
   The character id and ISM reference number can be found on section Reference. For example 0 0 100 means
   Collect animation of Ryu(0) in Alpha(0) ISM fighting style for 100 animations.

   Result animation picture of each character will store in same folder that name with character id type2.  For 
example, folder name 000 is for Ryu, folder 001 is for E.honda. I ha given you save state that already have all 
character unlock. So there will be 36 character slot that can select. But there will be some id missing, because
you can see that there are some slot that dont have character. For more detail please see the reference about
character id somewhere in this document.
   The name of animation collection picture file will give with that animation value. But not a value that directly 
read from the memory address, it is a value that had normalized. (More detail about Normalizing can see in 
What is AI-TEM section) I use the minimum animation value as the base for normalize. For almost character the 
minimum animation value is the first standing animation. (every character have sequence of 4-8 frame standing 
animation. For example the raw animation value that read from memory addres are like this....

3453560, 3453572, 3453684, 3453696 3453608, 3453620

and assume that 33453560 is minimum of standing that i will use to be base for normalization. The result value 
after normalize which i use to be file name will be ike this...

000000, 0000012, 0000024, 000036, 000048, 000060

So, i hope you can understand it. I think normalize it will make it easier, more userfriendly to understand. But 
there are some exception characters. that have something special.

    First is Vega(or M.Bison in US version name), i found that his minimum animation value is not standing 
animation but another. So will not get all of his animation picture set if you run Animation Collection Tool. 
Because it has hardcode algorithm to find first value from standing animationonly. And making exzeption for 
only some character will make the code not look good. So i suggest the easiest way to get Vega all animation 
picture is to download from my site. It should be only 10M after compression.
    The second problem guy is Gen. The problem is not same as Vega, Gen's minimum animation value is 
standing as another. But he is the only one char who can change pattern of fighting style while in battle. Not 
means he can change his ISM between fighting, but he can change between 'So' and 'Ki' style... And more than 
that his character ID also change when he change fighting style. (his character ID means the value address that 
i decide to use it as character identification.) And... its also depend on his ISM style too, whether he can change 
fighting style. The sotuation seem to be complex. Therefore again, you cannot get his all set animation picture
when you run Animation Collection Tool. And again i suggest you to download it from my site. (More info 
about this topic can see in gamefaqs document
http://db.gamefaqs.com/console/psx/file/street_fighter_alpha_3_c.txt)
    Third problem guy is 'Final Vega', he is another form of Vega who can use ultimately cheat movement. I still 
cannot findout how to differentiate 'final vega' and 'vega' by useing any address. But now i will not interesting to 
findout because he is very cheat character, noneed to interesting him. 
(In conclusion i suggest you to omit these 3 problem characters from your experiment :P)

    Next, Even i know which is the start animation (minimum animation of standing animation) but i cannot know
which value is the final for each character. So i need to try to collect about 1500 animation of each character
and see that is that enought. And then finding the exactly amount of animation of each character by seeing
each character animation picture after collect. And decide which picture is the end of animation series. To know
that which picture is the final picture is seeing which picture is start tobe wrong or empty graphic. That means
that value is begin to overflow and that pic will never use in the game so i can decide that which pic is the end
of animation. The INI file that i had give you with this package will define the number all of animation for each 
character already so you can run it without no worry. (if i didnot do anything wrong)
    
Missing Animation
    This part will describe about the problem with this animation colection tool. If you had try to run this tool,
you will notice that there is a  folder name 'miss' appearing, and may be you can notice that in some character
the number of picture that has in that char folder is less than the number of animation that you define it to collect.
That is beacuse some animation cannot collect properly... because of this tool will force the value in animation 
address to change from start animation value to the end animation value (approximately...). But some value
is semi animate frame. its means that animation frame is not static frame but always change its frame picture even
this tool had lock the value already. Or some value cannot be set to the animation address. its means that after 
you set that value already it will change into another value automatically in net frame. (This can happen may be 
because of the initial code  of STZ3 game.) I decide to seperate the palce to keep those frame in another folder. 
That is why it has a 'miss' folder for. And the picture that captured from those kind of frame is just randomly 
capture from one of changing frames.

================================================================
12) Auto Batle Tool
================================================================
    This tool allow you to define automatic continuous battle as long as you need in Training mode.
(This tool is now can use for STZ3 only.) When you run this tool it will force you to load game state and go
to the character selection screen of training mode immediately. By define the AutoBattleINI.txt. You can control
who will fight in the battl, Let see the file format
---------------------------------------------------------------
1
2
0 0 9 1 1 500
1 0 3 0 1 500
---------------------------------------------------------------
- The first line has only one number, it must be 0 or 1. It indicate that which AI mode you will use in auto 
   battle since we have 2 type of AI. 0 is for hardcode AI module that you implement in AI-TEM. 1 is for python 
   script AI module. (so, in this example i am using pythonscript in auto battle.)
- Second line will tell howmany line will follows. You see that there are two line follow so its say 2. i want to 
   know how many memory to allocate. And dont want to parse this file twice. so please update this line when 
   you change this file.
- The following line is the script to define the battle in each round. You can see 5 number seperate by space, 
   they are... charID player1, ISM mode player1, charID player2, ISM mode player2, time. 
   when the unit of time that use in this tool is in frame, which 60 frames is equal to 1 second. For example...
   ---------------------------------------------------------------
   0 0 9 1 1 500
   1 0 3 0 1 500
   ---------------------------------------------------------------
   Means, First round is Ryu(0) in Z ISM (0) battle with Cammy(9) in V ISM(1) for1 round 500 frames each round
   Then 2nd round if E.honda(1) in Z ISM(0) battle with Chunli(3) in Z ISM(0) for 1 round 500 frames each round
(*note the time is start counting when the word 'Fight' is apper, which it must wait about 2 seconds until real start fight.)

    Next let me explan about why does i use training mode instead of versus mode. The major cause is because 
of the versus mode will allow only in 2 players. Its means you need to open 2 instance of VBA AI-TEM. That 
make unconvinent to user. (However it can use, you can try it just open 2 instance and select Versus mode of 
two instance. Doing this, you can control your character and fight with you own AI. Or even let 2 diferent AI 
module command both character and fight each other.) And to control 2 instance of VBA AI-TEM is rather hard, 
so now i omit it first. (This will be future work)
    Therefore, doing auto battle in Training mode is easier. But it cons is that it can fight with original STZ3 AI 
only. cannot fight with human or another AI. And in Training mode the health bap of palyer1 wil always full 
however her got damage. So if you want to know how many damage each character had got, you should 
observe the damage address (already provided) instead of healthbar address. More detail about the damage address
value can found in section The AI module.

================================================================
13) Memory compare tools
================================================================
This section will tell about my adapt tool that will helping in finding game state data. The tool is 90% complete.
And can use now. Maybe it will not important part now because the goal of this release is to introduce AI-TEM 
concept with STZ3 game first. However i will try to describe it.

It use for automatic search a value from many different game states that dumped from emulator. You can 
save many game states and give conditions of value you want to search. Such as value that in state 1 > state 2 
and in state 2 > state 3 but in state 3 < state1.

To use it, First you need to save game state data that you want to search from AI-TEM. By choosing at AI-TEM 
menu and WriteGMDFile. Save much as you want but dont forgot to remember that which game state is which 
situation so you can give a right condition for search. When you done this process you will got *.GMD file.
    Next, open the MCT (Memory compare tool). There will be file panel on the left and some box and botton 
on the right. The lest panel will show the GMD compair pair files. The right dialog and buttom use for browse 
and set conditions. You must choose first file (first browse button). Then choose condition of searching >, >=, 
<, <=, <>, ==. Then choose second GMD file for that compare. Example GMD1 > GMD2 means, you want to
search for address that its value in GMD1 is greater than GMD2. Then press Add button for set up those search 
and it will show on the left panel. You can continue thie process to add multiple search conditions. The result 
of searching will continuly. The result of first condition will continue to use in second and third and... conditions.
Example. if you setup first condition like this, GMD1 > GMD2 and second condition like this GMD3 < GMD4.
The result will show the address that its value in GMD1 is greater its value in GMD2 and its value in GMD3 is 
less than its value in GMD4. You can edit the condition by hilight the condition on the left panel then edit 
file name or condition in dialog and then press Edit button.
    I think tool like this can helpin find game state address that user want. Because of saving game state and 
finding in static situation will not make the value change while searching. If you save game state and reload in 
VBA and then search for cheat may be it can possible that value can change (depend on situation). Example 
if you save state when bullet hadoken is moving, suddenly when you reload it the bullet will move and may 
change the condition of searching. However the most important thing for succeeding of using this tool may 
depend on the game state file that you provide for search. If you cannot provide the state that different enought 
to seperate the right value, you may not found the address that you want.

================================================================
14) About Finding the address of game state data
================================================================
I guess this section is the most wonder of people who read this document or interesting in AI-TEM.
I had explain about the important of finding game state data and give some easy example already in
'The Woriking of AI-TEM' section. But there are still another example, technique, situation that more
complex that i want to tell you... in this section...

    The content of this section (that will be update in future is...)
- How can i find every game state data that i use in AI-TEM Street fighter Zero3
- My experience about finding another game state address. I had some experience in many games many console.
  Such as Famicom, Megadrive, SuperFamicom, Arcade and Gameboy Advance.


Now i will tell how can i found game state data that use in AI-TEM STZ3.
Below are list of tem, and detail will follow.
m_addrCharID
m_addrHitPoint
m_addrISMBar
m_addrPosX
m_addrPosY
m_addrAnimation
m_addrRefAnimation
m_addrWPosX
m_addrWPosY
m_addrWEnd
m_addrDamage

-------------------------------------------------------
m_addrCharID (8 bits)
-------------------------------------------------------
1P: 0x20008EA
2P: 0x20044FA
Use: Identify character id.

Concept. You can know that there must have address that hold character id. That address should change when 
you change character in same situation. Should assume that this value is 8 bits because there are only 40 
characters in this game. If you are this game programmer will you declare 16 bit variable for hold this value?
Example of finding, in training character select screen. Begin by put a cursor at ryu character and search the 
memory address, remember them (by using tool). Then change your cursor position to point another character.
Now the value in character id should change. Then search for the address that value had changed. Continue 
with this same method until you can find the address that always change when you change the cursor.
Tip 1: You can change cursor from ryu to ken and back to ryu again and search for the value that not change.
This can cutout the address that hold value that change by button pressed, or change by the time but not the 
right value that we want. There are some value that always change (may be some clock or counter of some thing)
if you move cursor and search for a changed value, they always appear since time change.
After a few attemp you also find this address.

-------------------------------------------------------
m_addrHitPoint (16 bits)
-------------------------------------------------------
1P: 0x2000818
2P: 0x2004428
Use: Identify character ISM gauge, the gauge that allow player to use special move.

Concept, if health decrease that address's value should decrease and when it increase the address's value should 
increase too. Anf 8 bit should enought to hold this value. So begin battle in arcade mode and first remember all 
value at begin of battle when character's health still full. Then make it decrease and search for address that its value decrease. You can save state when health bar is full and then reload it after it decrease to make the situation that 
health bar is increase (that cannot be done by ordinary playing game) abd search for address that its value is increase.
Tip2 You may play a little without make health bar change and search for equal value. This for get rid of value 
that always change by time.
After a few attemp you also find this address.

-------------------------------------------------------
m_addrISMBar (16 bits)
-------------------------------------------------------
1P: 0x200090E
2P: 0x200451E
Use:  Identify character special move.

Err..., same as m_addrHitPoint.


-------------------------------------------------------
m_addrPosX (16 bits)
-------------------------------------------------------
1P: 0x20007C2
2P: 0x20043D2
Use: Identify character position, approximately position of mid point of character sprite.

Concept: When you move to the right, the value in that address should be increase. And decrease if move left.
So it seem to be easy just control your character right and left and search the value that increase and decrease 
coresponding to your position. And use above tips thing should be easy. But i had found the problem, i cant 
find any address that match to the position of character. It happen because i search in 8 bit value. At first i 
think 8 bit sjould enought (256 should enought in my opinion) but it is not enought. The width of stage in 
STZ3 is vary depend on stage but approximately 600 units. So it need 16 bit value to hold. If you search in 
8 bit when the value increase until it float it will back to 0 (decrease), then that why cannot find it.
After i realize that it is easy to find this address.
Note: The way to find position address is not hard, but the way to understand its meaning is a little bit difficult.
Since had explain in section above 'About STZ3 Coordinate System'.

-------------------------------------------------------
m_addrPosY (16 bits)
-------------------------------------------------------
1P: 0x20007c6
2P: 0x20043D6
Use: same as X but Y.

Do you think i will tell that it is same as X and end? No, you make wrong guess. :P This time i will tell you that 
there must have a corespondence between address that keep position X and Y. After you had found address 
that hold X position value. You should realize that the address that hold Y position value should be near the X.
If you are game programmer will you make a struct or class that hold character data like this...

Struct STZ3 char_sprite_draw
{
    posX;
    posY;
    :
}

It is obvoius to every programmer that they should do that. So when the code had comiled and build into binary 
the address that hold position if X and Y should be close together. So if you look at memory viewer and see 
around 0x20007C2 (X position address) you can notice that the next address (16 bit) always changes coresponding 
to the position Y axis. If you jump up it will increase and if you fall down it will decrease.

-------------------------------------------------------
m_addrAnimation (32 bits)
-------------------------------------------------------
1P: 0x20007D0
2P: 0x20043E0
Use: Identify character's animation

Concept: Same as position Y, the value of animation sprite should be some where close to the position value.
When i look around 

0x20007C2 (X position address) in memory viewer, i can see that there is one address
that its value always chang running all the time(0x20007D0). Which is synchornize to my character sthanding 
animation. Do you notice that when character is standing without do anything, it does not stand static but has 
a little footwork. That means its animation value should be change too, matching to the change of value in 
that address. To make sure more, i had hold down button to make character crounch. When character (ryu) 
crounch the animation will static not has footwork when crounch (but some character still footwork when crounch).
And notice that the value in that address is static too. Made more creditable to believe that address is animation
address. Then more experiment to test that value in that address is coresponding to animation had done.
(It is the hardest part of AI-TEM work) Now i will believe that the address 0x20007D0 hold animation data 
(until can found evidence that can contradiction it). At first time i think 16 bit should enought to keep animation 
value. 16 bit can hold 65536 value, character animation should not has much like that. I had notice that 
the animation value will increase by 12 every frame. (still wonder why 12?) So 65536 can hold approximately 
5400 animation frame. But when i test it i found that 16 bit is not enought the value must be 32 bit. I think it 
is cause by the offset value of animation. The first animation (lease animation value) is not begin with 0 but 
begin by a very high value and vary for each character and each situation. The first animation for ryu in my test 
case begin at 33646800, just a begining value had exceed 16 bit already. So if you search it in 16 bit format 
you will fin that some animation will be strange not continuous or br minus value. There are still has problem 
about the offset of value had change depend on character, its opponent and situation. I will explain them in 
next address (m_addrRefAnimation).

-------------------------------------------------------
m_addrRefAnimation (32 bits)
-------------------------------------------------------
1P: 0x2000828
2P: 0x2004438
Use: Reference base value for m_addrAnimation

From above, there are problem about value in address that i use to be animation address (0x20007D0).
- Value in animation address change depend on opponent character. Such as when you choose ryu and fight 
with ken your standing animation value will be 'A' but when you fight with Chunli the standing animation 
value will be 'B' (eample). Some time it change during different round in one match.
- Value in that address may change even in same animation of same character. I had test in the situation that 
ryu vs ryu with same color same stage but the value of ryu's standing animation still change not equal every time.

I think it must have some pointer relate to this problem. So need to find another address that can reference
the animation address. I can notice that the value in address 0x2000828 will always has static delta with value 
in animation address. This is the same reason as struct of character sprite drawing. The pointer should be 
some where near that address. Indeed there may be many address that can be use like this but i choose this.
I summary i just try and test is value in this address can be referer for animati on value. If not try another.
There should have some address that can be use.

(Next I need to keep a minimum animation value to be a base value for normalize another animation. But that 
base animation value are different for each character, so need to collect base animation value for every character.
These process can done automatic by using help of some tools, and summary data is at reference section.)

-------------------------------------------------------
m_addrWPosX (16 bits)
-------------------------------------------------------
1P: 0x200C0DA
2P: 0x20021AA
Use: Identify the position X axis of character bullet

This is the hardest address that i ever find. Event concept is same as character position. But the bullet will appear 
for only a few second after it release. And cannot control it to move backward. So it will very difficult to search 
for the address. That time i still have only original VBA tool to use. I use the movie recorder to helping record 
the game play while bullet had fire and can playback it again. Can helping me, i dont need to press command to 
fire bullet every time i search. After that the same procedure as position address finding had apply. With movie 
player tool you can reload and make the bullet position decrease for finding condition.
At that time that i know that a tool that can help for search value is needed. So i develop a memory compare tool.
It will recieve input of game save states and make auto compare which user can identify a condition of value.
More detail of this tool can see in section 13) Memory compare tools.

-------------------------------------------------------
m_addrWPosY (16 bits)
-------------------------------------------------------
1P: 0x200C0DE
2P: 0x20021AE
Use: Identify the position Y axis of character bullet

This is beside the x position address, same case as character position.

-------------------------------------------------------
m_addrWEnd (16 bits)
-------------------------------------------------------
1P: 0x200c1c4
2P: 0x2002294
Use: It is counter to tell that does the bullet that character fire had end.

I actually dont intend to find this address. But found it fortunately while searching for position of bullet address.
When i search around the character position address, i found that this address value always change only when 
bullet had fire and appear in the screen. When bullet is running its value will continue decreaseingly. And when 
bullet disappear its value is 0. After a few test i can know that value in this address will tell that how long until 
the bullet will stop. The use of this address is to check that does my bullet stop or not if bullet had stop you can 
fire a new bullet again. (You can have only one bullet on the screen.)

-------------------------------------------------------
m_addrDamage (16 bits)
-------------------------------------------------------
1P: 0x2000AAA
2P: 0x20046BA
Use: See Part 0: About STZ3 class.  int m_damage

Concept: It should have an address that keep amount of damage that happened. I magine that value in that 
address sould be 0 at normal situation and suddenly change to a damage value when attack happen. To find 
this address is not hard. Searching for value that only change when only attack happen. And not change in 
normal situation. So i just punch another character and search value that change in second that damage happen.
Then wait a second (that value should go back to 0) and search for address that the value is 0. A few attemp 
of that process, i can find this address.

more experience about finding game state data will tell...
================================================================
15) Discussion (*** Some content of this section is copy from my paper)
================================================================
    Which AI method can it be used with?
AI-TEM dose not limit AI methods that it can be used with,
because its concept is only using an emulator as game engine.
Some AI methodology, however, requires extra functions.
For example, using Genetic Algorithm requires running
tests large amount of times, may be hundreds or thousands
generation. Therefore, automatic result recorder is
needed. High speed running mode will also be an additional
welcome, for it can save time to train AI.
High speed mode is already available in VBA and many
other emulators. Not all games may allow us to provide automatic
running mode. This is because, if we cannot find
memory data address that tells us about the beginning and
the end of the game, we cannot force the situation. But in
general, automatic result collection can be done. Therefore,
various AI techniques can be used.

    What kind of Game should use AI-TEM?
If researchers are interested in FPS, RTS or NWN game,
there are games that come with tools. Good testing environment
for such games can be built with such tools. Also, there
are very few of these games on consoles. AI-TEM may not
be the first choice for testing such games. If researchers are
interested in simple platform action game, writing a game
from scratch or finding some open source clone game is not
a bad choice because all environments of the game can be
fully controlled. However, developing games, from tools
provided by a game, or from an open source clone cannot
easily get us commercial-quality game. This is where
AI-TEM can come in. AI-TEM can be used to test an AI
developed on a simple, but fully controllable environment,
against real commercial game. In the case of racing game
it is difficult to know game state data such as opponent car
position and the track situation. As a result, AI-TEM will
not be appropriate. For fighting game we think that using
AI-TEM is suitable, because this type of game is rather difficult
to make and even more difficult to make it as good as
commercial game. Therefore, we think the tradeoff in the
case of fighting game is worthwhile. For sport game, we
think that it is still suitable to use AI-TEM, because of the
same reason as fighting game. Even though there may be
many game states that an AI module needs to know, finding
them may be easier than creating a high quality sport game
from scratch. Some AI researchers use Robocup simulation
league to be a testbed for their football AI research (Sean
Luke 1997). However, Robocup simulation league rules are
still not the same as real football rules. For other types of
games, researchers have to consider the same factors as in
this section

    The Limitation of using VBA in AI-TEM
To play a multiplayer mode in VBA (Link), two or more
instances of emulators have to be used. Controlling many
emulators at the same time while testing is not very convenient.
With STZ3, when we want to test our script against
the original AI, we have to use versus mode, that forces us to
open another VBA instance. Otherwise we cannot select an
opponent and difficulty level. The second instance is forced
to run in window mode unnecessarily. It will be better if the
second instance can run in the screen-off mode, in order to
save CPU power.
Sometimes two connected emulators do not synchronize.
This may damage the automatic module in long run. Detecting
game state of both VBAs becomes necessary. We can
then reload the game again if they do not synchronize.
Although there are some inconveniences, AI-TEM generally
works. The emulator can be fixed to tackle the problem.

    About PC game trainer
PC game trainer is a program used for editing states of a
game that runs on PC. It will search state data of the game
that is running and find the right address to edit. If it is used
to observe some game state data and send AI commands into
PC game, it will be just like our AI-TEM.
However, it is compare to be only game state observer
module in our system. If researchers want to use it, they will
need to implement other modules to complete the testbed
system.


============================================================
151) Problem, bugs, ETC... Report
============================================================
This section i will describe a problem or bug that i ever found.
Some of them still remain in code (it will have my excuse that wht its still remain) .
some are already get rid of, but another people who will modify my code may face it again.
Anyone who know more about these topic please discuss and share your knowledge:)

- Py_InitModule fail
The syntom is strange, when running program and start python program will crash.
But this not appear when run in debugging mode, so cannot find the cause easily.
After "some (huge)" attemps, i can found that the cause of problem is at Py_InitModule() function.
The m_stz3Method[] array must have size equal to the number of interface function that you will initial,
cannot let it remain. And beware to make its in structure that when allocate memory it will devide by4.
(so sorry i dont know to muc about this and cannot explain well........................)

- AI module (build-in and Python) not work well with VBA movie record tools.
This because when loading or saving movie by VBA tools. The path of working will change to the path that 
load/save movie. So if python script is place at another path (normally at same place as .exe) the progam
will cannot run.

- Use script to press combo but sometime its miss?
I found that even using py script to press button, to make combos. (sensitive combo that must use very good timing).
But sometimes it not success?! Use program to press button should reliable. but why sometime it miss?
Many experiment had done for findout the cause... but i still not understand the cause now......
(at lease i think it does not cause from the delay of calling python.)
How ever for another action that not timing critical, i still not sense a problem like this.

- More data for stz3 require?
I always think that more data may required to make AI for fighting games.
They are, each animation frame time, each animation attack range, each animation hit and unhit position
(pixel detect information for each frame). Those data are data that original fighting game developer know.
(and i think may be only they that know those info)
However, may be those data, info can know by training AI to collect them...is it posible or not?

- Debug version???
I always have problem when build program in release version.
Sometime it cannot build or can but cannot run on another machine or required another dll to run (mfc dll....)
This time too, i face that problem again (very bore this problem...)
so i decide to release in debug version first and i will try to find the way to build perfectly release
that can run without requirde any dll (like original VBA can release).


============================================================
16) Reference Section
============================================================

--------------------------------------------------------------------------------------------------------------------------
Character ID type1: Order by in-game real charid. It should have every id, but now i cannot find out all.
--------------------------------------------------------------------------------------------------------------------------
  0 RYU
 
  1 KEN
 
  2 GOKI

  3 NASH
 
  4 CHUNLI

  5 ADON
 
  6 SODOM
 
  7 GUY
 
  8 BIRDIE

  9 ROSE

10 VEGA

11 SAGAT

12 DAN

13 SAKURA

14 ROLENTO

15 DHALSIM

16 ZANGIEF 

17 GEN

18 ???


19 GEN FORM B // You can change into this from while in battle only
20 ???
21 ???



22 CAMMY

23 EVILRYU

24 EHONDA

25 BLANKA 

26 MIKA

27 CODY

28 BALOG

29 KAREN

30 JULI

31 JUNI

32 GUILE

33 FEILONG

34 DJ

35 THAWK
N
36 SHIN GOKI

37 MBISON	
38 EAGLE
39 MAKI
40 YUN

--------------------------------------------------------------------------------------------------------------------------
Character ID type2: Order by character position in training mode character select screen.
--------------------------------------------------------------------------------------------------------------------------
Order by left to right and up to down. Some id dont have character because that slot dont use.
-----------------------------------
 0    1   2     3    4    5    6
 7    8    9  10   11  12  13
14  15  16  17  18  19  20
21  22  23  24  25  26  27
28  29  30  31  32  33  34
35  36  37  38  39  40  41
------------------------------------
  0 RYU
  1 EHONDA
  2 BLANKA
  3 CHUNLI
  4 ZANGIEF
  5 DHALSIM
  6 KEN
  7 GOKI
  8 NASH
  9 CAMMY
10 MBISON
11 BALOG
12 SAGAT
13 VEGA
14 ADON
15 GEN *** // Gen has 2 form, that can change in battle only.
16 BIRDIE
17 CODY
18 GUY
19 ROLENTO
20 SODOM
21 ROSE
22 SAKURA
23 KAREN
24 DAN
25 MIKA
26 JULI
27 JUNI
28 RAMDOM P1*** // If you select this, it will random char
29 EVILRYU
30 FEILONG
31 DJ
32 THAWK
33 GUILE
34 RANDOM P2*** // If you select this, it will random char
35 -*** // no this slot
36 -*** // no this slot
37 MAKI
38 YUN
39 EAGLE
40 -*** // no this slot
41 -*** // no this slot

--------------------------------------------------------------------------------------------------------------------------
ISM ID: ISM is fighting style, this system is a unique system for street fighter series.
--------------------------------------------------------------------------------------------------------------------------
Z ISM (A ISM)    0
V ISM 1
X ISM 2

--------------------------------------------------------------------------------------------------------------------------
Character Sprite Size 
--------------------------------------------------------------------------------------------------------------------------
This is character sprite approximate size, measure by using photoshop after capture the screen manually.
The width and height is measure by most left to most right part and most bottom to most top part 
of that character sprite (some character has exception with their weapon).

CharName width height (in pixel)

ryu 32 64
honda  52 64
blanka 46 72
chunli 46 56
zangief 58  74
dhalsim 48 68
ken 32 64

goki 32 64
nash 46 64
cammy 36 58
bison 46 70
balog 40 72 (Not include his claw)
sagat 40 78
vega 58 64

adon 46 68
gen 36 58, 36 66
birdie 50 72
cody 32 70
guy 36 64
rolento 30 64 (Not include his club)
sodom 44  76

rose 50 68
sakura 36 56
karen 46 56
Dan 32 64
Mika 40 64
Juli 36 56
Juni 36 56

feilong 42 56
Dj 36 70
Thawk 58 86

evil ryu 32 64
guild 40 64
Maki 40 60
Yun 36 52
Eagle 32 66

Summary
Width Min-Max:  32-58
Height Min-Max: 52-86

================================================================
17) Credit
================================================================
- VBA Team
- VBA Link Team
- Nintendo
- Capcom
- GameFaqs
- Chulalongkorn University
- My Advisor
- My Friend
- My Family

================================================================
18) Legal Information
================================================================
- GNU license

================================================================
19) Version History
================================================================

Version 0.2    [21 Aug 06] 
                    AI-TEM can catch exception and report error when run python script.
                    Detail decribe in section... 09) The AI Module -> Part 2: Python Script -> Python Error Check.
                    The topic "Cannot verify Python script before run." was removed. (since it was managed)
                    Src and bin packages are updated too.

Version 0.1    [07 Aug 06] 
                    Add 2p's game state data address that i forgot in first release. 

Version 0.0    [?? Jul 06] 
                     First release.

================================================================
29) My Complainlation ???
================================================================
This section is not directly relate to AI-TEM. it just some of my openion...
   Hey, what do you think about AI in game? Do you think it is only a PathFinding? And what do you think
about the term Game? Do you think it is only First Person Shooter or Real Time Strategy? Why i ask this...
Umm because i feel that... many paper that relate to Game field are usually talking about those topic, a 
pathfinding, FPS or RTS game... why...why ..why... why i didnot see any much of paper about Fighting game
like Street Fighter, The King of Fighter, Tekken, Virtual Fighter. about Soccer game that is not Robocup like 
Winning Eleven or FIFA, Action game like BioHazard, God of war, MetalGear Solid, Grand thief Auto. RPG 
game like Final Fantasy, DragonQuest or Star Ocean. Or Racing game like Granturismo, Need for speed.
The most of paper that i had seen is on Quake, Half Life, StarCrafts, Never winter Nights, Black and White,
or even Chess.
    I had talk to someguys professional in game AI and the first topic that they can thinkout is pathfinding.
I never interesting in pathfinding, because it seem to be use for FPS and RTS games only. (but i know that
indeed other game type also use pathfinding too.) And... errr. i dont like those 2 kinds of games. the FPS 
always make my head feel dizzy, headaches. I think many people in the world have this kind of symptom
when they play FPS game, but cannot understand why most of gamer in this world still like it. And the RTS
game, ... i feel that it take too long time to play one scenario or one stage. I never feel good when i lose
in a game that had taken long time already. But again it seem that most of PC gamer always like RTS game.
    Ok that is... i just want to complain. Indeed i think i know the reason. And their are some of paper that
talk about console game such as lemming and fighting game. That make some inspiration to me to create
AI-TEM.